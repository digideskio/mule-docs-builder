= Developing a CloudHub Application

The best place to learn how to develop a CloudHub application is in the
link:/documentation/display/current/Getting+Started+with+CloudHub[Getting
Started with CloudHub] guide, which includes some walkthroughs of the
basic concepts and some examples to get you familiar with the process of
developing and deploying your applications for CloudHub. 

This page covers some additional details relevant to deployment.

== Specifying Your Host Name

The host name for all endpoints in your CloudHub configuration should be
defined as **localhost**. CloudHub will then route requests from your
application domain URL to the endpoint. If you deploy on multiple
link:/documentation/display/current/FAQ[workers], CloudHub will
load-balance incoming traffic automatically across those workers for
you. As your application scales, load will be distributed over all of
your workers.

== Providing an External HTTP or HTTPS Port

If your application requires an externally accessible HTTP or HTTPS port
to receive messages, trigger events, or expose a web service or user
interface, you must declare the port using the reserved
property `${http.port} `or` ${https.port}`. On CloudHub,
port `${http.port} `or` ${https.port}` is assigned automatically by the
platform services. Traffic on port 80 to your application domain URL
will be routed to this port.

CloudHub only supports incoming traffic on port 80 of your application
domain URL. To support routing to multiple CloudHub services over this
port, you need to configure them each with unique paths on the URL that
is exposed. For example:

== Running Your Application Locally

If you want to run a CloudHub application locally, you need to create an
link:/documentation/display/current/Deployment+Descriptor[application
properties] file named **mule-app.properties **in the `src/main/app`
folder of your project. You need to do this whether you work in Mule
Studio or another IDE. This allows you to define a local value for the
variable `http.port` or `https.port`.

If you have other runtime settings that you want configured differently
when running locally, you may also place them in the application
properties file and refer to them using the syntax `${propertyname}` in
your mule application configuration. Each application can declare a set
of environment variables when it is deployed in order to provide a
different value when deploying on CloudHub. You can define these
environment variables using the
link:/documentation/display/current/Deploying+a+CloudHub+Application[CloudHub
Console] or the
link:/documentation/display/current/Command+Line+Tools[Command Line
Tools].

== Logging

All log messages from your application will be captured by the CloudHub
logging service and available through the
link:/documentation/display/current/Viewing+Log+Data[log search tool] in
the CloudHub console. If you wish to expose additional information in
your logs for diagnostic or audit purposes, Mule provides a
link:/documentation/display/current/Logger+Component+Reference[logger
element] for fine grained logging of message content.

== Packaging Third-Party Libraries

CloudHub provides services in the platform that support connecting over
many different protocols and transforming many data formats. All the
standard Mule libraries are included and available to your application.
If you have the need to include a different third party library, you
will need to package that library in the `<mule application zip>/lib`
folder of your
link:/documentation/display/current/Application+Format[application
package]. Any libraries that are packaged in your mule application lib
folder will be made available on the classpath to your application at
run time.

== Accessing Resources Behind the Firewall

When developing an application that needs to access resources from
inside your firewall, CloudHub provides the
link:/documentation/display/current/Secure+Data+Gateway[Secure Data
Gateway] as a channel to securely reach these.

== Accessing Third-Party APIs and Services

CloudHub includes connectors for many third party applications, such as
Salesforce, Netsuite, Twitter, and others. Anypoint™ Studio includes a
few of the most common ones out of the box for developing with CloudHub,
and the link:#[Old Anypoint Connector DevKit] documentation provides
more detail on how to find and deploy these connectors with your
application.

== Adding a UI for Your Application

CloudHub applications can have a web UI using HTML and JavaScript. The
AJAX Module provides support for interacting with your application from
the browser and provides support for serving up static content.

== Go Further

* Learn
about link:/documentation/display/current/Deploying+a+CloudHub+Application[Deploying
a CloudHub Application]
* Once you have developed and deployed your application, read
about link:/documentation/display/current/Managing+CloudHub+Applications[Managing
CloudHub Applications] at runtime.

 
